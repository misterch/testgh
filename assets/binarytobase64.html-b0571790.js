import{_ as o,r as t,o as c,c as p,b as s,e as n,d as i,a}from"./app-b83f042f.js";const r={},l=a(`<h2 id="buffer" tabindex="-1"><a class="header-anchor" href="#buffer" aria-hidden="true">#</a> Buffer</h2><p><code>Buffer</code>类是JavaScript中<code>Uint8Array</code>的子类，可以将<code>Buffer</code>看成一个<strong>储存二进制</strong>的数组，数组中的每一项可以<strong>保存8位二进制数</strong>，即数组中每一项可以保存<strong>1字节数据</strong></p><p><code>1Byte</code>可以表示<code>00000000</code>至<code>11111111</code>，即<code>2^8=256种状态</code></p><p><code>Buffer</code>中的每一项使用<strong>十六进制</strong>表示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//创建数组长度为3的Buffer对象，每项可以保存1个字节（8bit）的数据，总共可以保存3字节（24bit）的数据</span>
<span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
buf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token comment">//&lt;Buffer 31 32 33&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>Uint8Array</code>：数组每项最多只能储存最大8bit（1byte）共<code>2^8=256</code>种状态</p><ul><li>二进制：0000 0000 - 1111 1111</li><li>十六进制：00 - FF</li></ul><p><code>Uint16Array</code>：数组每项最多只能储存最大16bit（2byte）共<code>2^16=65535</code>种状态</p><ul><li>二进制：0000 0000 0000 0000 - 1111 1111 1111 1111</li><li>十六进制：0000 - FFFF</li></ul><p>如果<code>Uint8Array(4)</code>的长度是<code>4byte（4*8=32bit）</code>，[0b1111111,0b1111111,0,0]=[127,127,0,0]=[0x7f,0x7f，0,0]</p><p>用<code>Uint16Array</code>表示长度为<code>2byte（24bit）</code>，[0b111111101111111,0,0]=[32639,0]</p><p>用<code>Uint32Array</code>表示长度为<code>1byte（32bit）</code>，[0b111111101111111]=[32639,0]</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//为方便理解，使用有符号整数数组</span>
<span class="token comment">//创建一个4字节的TypedArray</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token comment">// -128(-2^7)~ 127(2^7 - 1)</span>
<span class="token keyword">var</span> u8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int8Array</span><span class="token punctuation">(</span>4arr<span class="token punctuation">)</span>
<span class="token comment">//u8 = [0b01111111,0b01111111,0,0]</span>
<span class="token comment">//使用Int16Array来表示的话，因为每项最大可以储存2字节，所以长度为4的Int8Array可以表示长度为2的Int16Array，即Int8Array的每两项合并为Int16Array的一项</span>
<span class="token comment">//即u16 = [0b0111111101111111,0]</span>
<span class="token comment">//使用十进制表示 u16 = [32639,0]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ascii" tabindex="-1"><a class="header-anchor" href="#ascii" aria-hidden="true">#</a> ASCII</h2><p>计算机内部所有信息最终都是一个二进制值，每个二进制位有两种状态<code>0</code>和<code>1</code>，8个二进制位可以表示有2^8=256种状态，每个状态可以对应一个符号，从<code>00000000</code>到<code>11111111</code>。</p><p>由美国制定的一套字符编码，对英语字符与二进制位之间的关系做了统一的规定，被称为ASCII码。</p>`,10),d={href:"https://tool.oschina.net/commons?type=4",target:"_blank",rel:"noopener noreferrer"},u=s("code",null,"SPACE",-1),b=s("code",null,"00100000",-1),k=s("code",null,"A",-1),m=s("code",null,"01000001",-1),v=a(`<h3 id="将buffer转换成字符" tabindex="-1"><a class="header-anchor" href="#将buffer转换成字符" aria-hidden="true">#</a> 将Buffer转换成字符</h3><p><code>Buffer</code>储存的是一组由二进制组成的数组，为方便显示使用十六进制显示</p><p>现在有一个Buffer数据，在计算机内部是这样的</p><p><code>001100010011001000110011</code></p><p>使用<code>console.log</code>来在控制台打印，显示的是十六进制格式</p><p><code>&lt;Buffer 31 32 33&gt;</code></p><p>将Buffer转换为ASCII编码格式的字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//创建长度为3的Uint8Array数组,用来模拟二进制数据</span>
<span class="token keyword">const</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">//存入16进制数据</span>
buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x31</span>
buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x32</span>
buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x33</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>String.fromCharCode()</code>可以传入<code>unicode</code>编码返回字符串</p><p>使用<code>charCodeAt()</code>可以获得字符串所对应的<code>unicode</code>编码</p><p><code>unicode</code>字符集包含世界上几乎所有字符的标准字符编码系统</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token operator">...</span>buf<span class="token punctuation">)</span> <span class="token comment">//123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="base64" tabindex="-1"><a class="header-anchor" href="#base64" aria-hidden="true">#</a> Base64</h2><p><img src="https://i-blog.csdnimg.cn/blog_migrate/6bd937a20b29714171b1669cfca0d4ab.png" alt=""></p><h3 id="转换步骤" tabindex="-1"><a class="header-anchor" href="#转换步骤" aria-hidden="true">#</a> 转换步骤</h3><ol><li>将待转换的字符串<strong>每三个字节为一组</strong>，每个字节8bit，总共24bit二进制位（6和8最小公倍数为24）</li><li>将24个二进制位<strong>每6个一组</strong>（从左往右分），共分为4组</li><li>每组前面添加<strong>两个0</strong>，每组6个变为8个二进制位，共32个二进制位，即<strong>4个字节</strong></li><li>根据Base64编码对照表获得的对应的值</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">btoa</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token operator">...</span>u8<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// MTIz</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,17);function f(h,g){const e=t("ExternalLinkIcon");return c(),p("div",null,[l,s("p",null,[s("a",d,[n("ASCII码"),i(e)]),n("一共规定了128个字符的编码（无符号正整数，二进制第一位始终为0），比如空格"),u,n("是32（二进制"),b,n("），大写字母"),k,n("是65（二进制"),m,n("）。")]),v])}const _=o(r,[["render",f],["__file","binarytobase64.html.vue"]]);export{_ as default};
